import random
import time
import asyncio
from datetime import datetime

from config import TOKEN
from Data_base import *
import telebot
from telebot.types import Message, ReplyKeyboardMarkup as RKM, ReplyKeyboardRemove as RKRe, InlineKeyboardMarkup as IKM, \
    InlineKeyboardButton as IKB, CallbackQuery as CBQ

bot = telebot.TeleBot(TOKEN)
temp = {}
clear = RKRe()


class Enemy:
    enemies = {
        "–†–∞–∑–±–æ–π–Ω–∏–∫": (75, 7.5),
        "–¶–∏–∫–ª–æ–ø": (125, 7.5),
        "–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å": (150, 10.0),
        "–°–∏–ª–∞—á": (100, 11.0),
        "–ê–∫—Ä–æ–±–∞—Ç": (200, 4.5),
        "–ì–≤–∞—Ä–¥–µ–µ—Ü": (80, 9.0),
        "–ú–µ—á–Ω–∏–∫": (75, 11.5),
        "–ú–µ–Ω–µ—Å—Ç—Ä–µ–ª—å": (60, 4.0),
        "–ú–µ–¥–∏–∫": (150, 5.5)
    }

    def __init__(self, hero_lvl: int):
        self.name = random.choice(list(self.enemies))
        self.hp = self.enemies[self.name][0] + (hero_lvl - 1) * 5
        self.dmg = self.enemies[self.name][1] + (hero_lvl - 1) * 0.25


@bot.message_handler(commands=["start"])
def start(m: Message):
    if new_plr(m):
        temp[m.chat.id] = {}
        reg0(m)
        return
    else:
        menu(m)
        return


@bot.message_handler(commands=["menu"])
def menu(m: Message):
    try:
        print(temp[m.chat.id])
    except KeyError:
        temp[m.chat.id] = {}
    txt = "—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n/home - –ø–æ–π—Ç–∏ –¥–æ–º–æ–π\n/square - –ø–æ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–ª–æ—â–∞–¥—å\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    bot.send_message(m.chat.id, txt, reply_markup=clear)


@bot.message_handler(commands=["home"])
def home(m: Message):
    kb = RKM(True, True)
    kb.row("–ø–æ—Å–ø–∞—Ç—å", "–ø–æ–µ—Å—Ç—å")
    bot.send_message(m.chat.id, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)
    bot.register_next_step_handler(m, reg3)


@bot.message_handler(commands=["stats"])
def stats(m: Message):
    player = carachters.read("user_id", m.chat.id)
    txt = (f"hp - {player[-4]}‚ù§\n"
           f"dmg - {player[-3]}‚ù§\n"
           f"lvl - {player[-2]}üü¢\n"
           f"exp - {player[-1]}üü¢")
    bot.send_message(m.chat.id, txt)
    asyncio.run(asyncio.sleep(4))
    menu(m)
    return


@bot.message_handler(commands=["square"])
def square(m: Message):
    kb = RKM(True, True)
    kb.row("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ø—Ä–æ–∫–∞—á–∫–∞ –ª–æ–≤–∫–æ—Å—Ç–∏", '–ø–æ–π—Ç–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ')
    bot.send_message(m.chat.id,
                     '–ü—Ä–∏–¥—è –Ω–∞ –ø–ª–æ—â–∞–¥—å, –ø—É—Ç–Ω–∏–∫ —É–≤–∏–¥–µ–ª —Å—Ç—Ä–µ–ª—å–±–∏—â–µ, –º–∞–Ω–µ–∫–µ–Ω–æ–≤, –Ω–∞–±–∏—Ç—ã—Ö —Å–µ–Ω–æ–º, —á—Ç–æ–±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å '
                     '–±–ª–∏–∂–Ω–∏–π –±–æ–π, –∑–∞–º—ã—Å–ª–æ–≤–∞—Ç—É—é –ø–æ–ª–æ—Å—É –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ –ø–æ–ª–µ, –∑–∞ –Ω–∏–º –±—ã–ª –≤—Ö–æ–¥ –≤ –ª–µ—Å,'
                     ' –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=kb)
    bot.register_next_step_handler(m, reg3)


@bot.callback_query_handler(func=lambda call: True)
def call_back(call: CBQ):
    if call.data.startswith("food_"):
        a = call.data.split(sep="_")
        eating(call.message, a[1], a[-1])
        kb = IKM()
        id, food = heals.read("user_id", call.message.chat.id)
        flag = 0
        for i in food:
            if food[i][0] == 0:
                pass
            elif food[i][0] > 0:
                flag = 1
        if flag == 0:
            bot.send_message(call.message.chat.id, "'... –ë–æ–ª—å—à–µ –µ—Å—Ç—å –∫–∞–∫-—Ç–æ –Ω–µ—á–µ–≥–æ...(–î–æ–±—ã—Ç—å –µ–¥—É –º–æ–∂–Ω–æ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏)'")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            menu(call.message)
            return
        else:
            for key in food:
                if food[key][0] > 0:
                    kb.row(
                        IKB(f"{key} - {food[key][0]} —à—Ç; {food[key][-1]} —Ö–ø",
                            callback_data=f"food_{key}_{food[key][-1]}"))
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=kb)
    elif call.data.startswith("sleep_"):
        a = call.data.split(sep="_")
        t = round(int(a[1]) / 10, 0)
        bot.send_message(call.message.chat.id, f"–í—ã –±—É–¥–µ—Ç–µ —Å–ø–∞—Ç—å {t} —Å–µ–∫.")
        asyncio.run(asyncio.sleep(t))
        sleeping(call.message, a[1])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
        return
    if call.data == "workout":
        player = carachters.read("user_id", call.message.chat.id)
        dmg = int(player[-2]) / 10
        player[-3] += dmg
        player[-3] = round(player[-3], 1)
        carachters.write(player)
        bot.answer_callback_query(call.id, f"–£—Ö... –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–∫–∞ –≤—ã–¥–∞–ª–∞—Å—å) (+ {dmg}dmg)", True)
    elif call.data == "menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
        return


def eat(m: Message):
    kb = IKM()
    id, food = heals.read("user_id", m.chat.id)
    flag = 0
    for i in food:
        if food[i][0] == 0:
            pass
        elif food[i][0] > 0:
            flag = 1
    if flag == 0:
        bot.send_message(m.chat.id, "'... –î–∞... –ê –≤ –ø–æ–≥—Ä–µ–±–µ –º—ã—à—å –ø–æ–≤–µ—Å–∏–ª–∞—Å—å...(–î–æ–±—ã—Ç—å –µ–¥—É –º–æ–∂–Ω–æ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏)'")
        menu(m)
        return
    else:
        for key in food:
            if food[key][0] > 0:
                kb.row(
                    IKB(f"{key} - {food[key][0]} —à—Ç; {food[key][-1]} —Ö–ø", callback_data=f"food_{key}_{food[key][-1]}"))
        bot.send_message(m.chat.id, "–ß—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å?", reply_markup=kb)


def eating(m: Message, food_type, hp):
    id, food = heals.read("user_id", m.chat.id)
    player = carachters.read("user_id", m.chat.id)
    if food[food_type][0] == 1:
        del food[food_type]
    else:
        food[food_type][0] -= 1
    heals.write([m.chat.id, food])
    player[3] += int(hp)
    carachters.write(player)
    print("–ø–æ–µ–ª–∏")


def sleep(m: Message):
    player = carachters.read("user_id", m.chat.id)
    low = int(races[player[2]][0] + ((player[-2] - 1) * 5)) // 2 - player[3]
    high = int(races[player[2]][0] + ((player[-2] - 1) * 5)) - player[3]
    if low > 0 or high > 0:
        kb = IKM()
        if low > 0:
            kb.row(IKB(f"–ü–æ–¥—Ä–µ–º–∞—Ç—å: +{low}‚ù§", callback_data=f"sleep_{low}"))
        if high > 0:
            kb.row(IKB(f"–î–∞–≤–∞–Ω—É—Ç—å —Ö—Ä–∞–ø–∞–∫–∞: +{high}‚ù§", callback_data=f"sleep_{high}"))
        bot.send_message(m.chat.id, "C–∫–æ–ª—å–∫–æ —Ç—ã –±—É–¥–µ—à—å —Å–ø–∞—Ç—å?", reply_markup=kb)
    else:
        bot.send_message(m.chat.id, "–¢–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–ø–∞—Ç—å")
        menu(m)
        return


def sleeping(m: Message, hp):
    player = carachters.read("user_id", m.chat.id)
    player[3] += int(hp)
    carachters.write(player)
    print("–ø–æ—Å–ø–∞–ª–∏")


def workout(m: Message):
    kb = IKM()
    kb.row(IKB("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="workout"))
    kb.row(IKB("–Ω–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(m.chat.id, '"–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –∏ —á—Ç–æ –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å...?"', reply_markup=kb)


def block(m: Message):
    try:
        print(temp[m.chat.id])
    except KeyError:
        temp[m.chat.id] = {}
    try:
        print(temp[m.chat.id]['win'])
    except KeyError:
        temp[m.chat.id]['win'] = 0
    if temp[m.chat.id]['win'] == 0:
        bot.send_message(m.chat.id, "–®–ø–∞–≥–∏ –Ω–∞–≥–æ–ª–æ, –¥–≤–æ—Ä—è–Ω–µ!", reply_markup=clear)
    asyncio.run(asyncio.sleep(3))
    sides = ["—Å–ª–µ–≤–∞", "—Å–ø—Ä–∞–≤–∞", "—Å–≤–µ—Ä—Ö—É", "—Å–Ω–∏–∑—É"]
    random.shuffle(sides)
    kb = RKM(True, False)
    kb.row(sides[0], sides[1])
    kb.row(sides[2], sides[-1])
    hit = sides[random.randint(0, 3)]
    bot.send_message(m.chat.id, f"–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ, —Å—É–¥–∞—Ä—å, {hit}!", reply_markup=kb)
    temp[m.chat.id]["start_t"] = datetime.now().timestamp()
    bot.register_next_step_handler(m, block_handler, hit)


def block_handler(m: Message, hit: str):
    temp[m.chat.id]["finish_t"] = datetime.now().timestamp()
    if temp[m.chat.id]["finish_t"] - temp[m.chat.id]["start_t"] > 2.5:
        bot.send_message(m.chat.id, "–¢—ã –Ω–µ —É—Å–ø–µ–ª —É–∫–ª–æ–Ω–∏—Ç—å—Å—è")
        asyncio.run(asyncio.sleep(1))
        temp[m.chat.id]['win'] = 0
        menu(m)
        return
    if m.text != hit:
        bot.send_message(m.chat.id, "–¢—ã —É–∫–ª–æ–Ω–∏–ª—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É")
        asyncio.run(asyncio.sleep(1))
        temp[m.chat.id]['win'] = 0
        menu(m)
        return
    if temp[m.chat.id]['win'] < 9:
        temp[m.chat.id]['win'] += 1
        bot.send_message(m.chat.id, "–ê —Ç—ã –Ω–µ–ø–ª–æ—Ö) –µ—â–µ —Ä–∞–∑–æ–∫!")
        block(m)
        return
    else:
        temp[m.chat.id]['win'] = 0
        player = carachters.read("user_id", m.chat.id)
        exp = player[-2] * 10 - player[-2] * 2
        player[-1] += exp
        carachters.write(player)
        lvl_up_check(m)
        bot.send_message(m.chat.id, f"–°—É–¥–∞—Ä—å, —è –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ—à–ª–∏ –¥–∞–Ω–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ!)(+ {exp} exp)")
        menu(m)
        return


def battle(m: Message):
    bot.send_message(m.chat.id, f"–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –≤—Ä–∞–≥–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ, –æ–Ω –≤—ã—Å–∫–æ—á–∏–ª –∏–∑-–∑–∞ –∫—É—Å—Ç–∞")
    asyncio.run(asyncio.sleep(2.3))
    new_enemy(m)


def new_enemy(m: Message):
    player = carachters.read("user_id", m.chat.id)
    enemy = Enemy(player[-2])
    kb = RKM(True, True)
    kb.row("–î—Ä–∞—Ç—å—Å—è", "–ü–∞—Ñ–æ—Å–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–∏–º–æ")
    kb.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")
    txt = f'"–•–º... –ß—Ç–æ –∂–µ –º–Ω–µ –¥–µ–ª–∞—Ç—å...? –ú–æ–π –≤—Ä–∞–≥: {enemy.name}"'
    bot.send_message(m.chat.id, txt, reply_markup=kb)
    bot.register_next_step_handler(m, attack_handler, enemy)


def attack_handler(m: Message, enemy):
    txt = m.text
    chance = random.randint(1, 6)
    if txt == "–î—Ä–∞—Ç—å—Å—è":
        attack(m, enemy)
        return
    elif txt == "–ü–∞—Ñ–æ—Å–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–∏–º–æ":
        if chance != 6:
            bot.send_message(m.chat.id, f"–¢—ã –≤—Å—Ç—Ä–µ—á–∞–µ—à—å –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞: {enemy.name}")
            asyncio.run(asyncio.sleep(2))
            new_enemy(m)
            return
        else:
            bot.send_message(m.chat.id, "–≠–π, —Å—É–¥–∞—Ä—å, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –∫—É–¥–∞ –≤—ã –∏–¥–µ—Ç–µ?! –°–µ–π—á–∞—Å –º—ã —Å –≤–∞–º–∏ –±—É–¥–µ–º –¥—Ä–∞—Ç—å—Å—è!")
            asyncio.run(asyncio.sleep(2))
            attack(m, enemy)
            return
    elif txt == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥":
        asyncio.run(asyncio.sleep(2.3))
        menu(m)
        return


def attack(m: Message, enemy):
    if attack_plr(m, enemy):
        if attack_enemy(m, enemy):
            attack(m, enemy)
    else:
        player = carachters.read("user_id", m.chat.id)
        player[-1] += random.randint(5, 7) * player[-2]
        carachters.write(player)
        asyncio.run(asyncio.sleep(1))
        lvl_up_check(m)
        asyncio.run(asyncio.sleep(1))
        bot.send_message(m.chat.id, "–î–∞, –Ω–µ–ª–µ–≥–∫–æ –±—ã–ª–æ, –ø–æ–π–¥—É –¥–∞–ª—å—à–µ)")
        asyncio.run(asyncio.sleep(3))
        battle(m)
        return


def attack_plr(m: Message, enemy):
    food_chance = random.randint(0,1)
    crit = random.randint(0, 499)
    print(food_chance)
    if enemy.name == "–¶–∏–∫–ª–æ–ø" and crit == 499:
        enemy.hp = 0
        bot.send_message(m.chat.id, "–•–∞-—Ö–∞! –¢–∞–∫ —Ç–µ–±–µ, –≥—Ä–æ–º–∏–ª–∞! –ó–Ω–∞—Ç—å –±—É–¥–µ—à—å! –≠—Ç–æ –±—ã–ª–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!")
        if food_chance == 1:

            id, food = heals.read("user_id", m.chat.id)
            food[random.choice(list(food))][0] += random.randint(1, 2)
            heals.write([m.chat.id, food])
            bot.send_message(m.chat.id, "–¢–∞–∫ —É —Ç–µ–±—è –µ—â–µ –∏ –µ–¥–∞ –±—ã–ª–∞, –∞ —Ç—ã –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è?! –ß—Ç–æ –∂, —Ç—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —É–∂–µ –º–µ—Ä—Ç–≤)")
        return False
    else:
        player = carachters.read("user_id", m.chat.id)
        dmg = player[-3]
        chance = random.randint(1, 20)
        if chance == 1:
            bot.send_message(m.chat.id, "–≠—Ö, –ø—Ä–æ–º–∞–∑–∞–ª...")
            return True
        elif chance == 20:
            bot.send_message(m.chat.id, "–û–π, —Ö–æ—Ä–æ—à–æ! –ö–∞–∫–æ–π —É–¥–∞—Ä!")
            enemy.hp -= dmg * 1.5
        else:
            enemy.hp -= dmg
        if enemy.hp <= 0:
            bot.send_message(m.chat.id, "–£—Ä–∞, –ø–æ–±–µ–¥–∞!")
            if food_chance == 1:
                id, food = heals.read("user_id", m.chat.id)
                food[random.choice(list(food))][0] += random.randint(1,2)
                heals.write([m.chat.id, food])
                bot.send_message(m.chat.id, "–¢–∞–∫ —É —Ç–µ–±—è –µ—â–µ –∏ –µ–¥–∞ –±—ã–ª–∞, –∞ —Ç—ã –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è?! –ß—Ç–æ –∂, —Ç—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —É–∂–µ –º–µ—Ä—Ç–≤)")
            return False
        else:
            bot.send_message(m.chat.id, f"–ù–µ –ø–æ–º–µ—Ä, –≥–∞–¥!(–µ—â–µ {enemy.hp}hp)")
            return True


def attack_enemy(m: Message, enemy):
    player = carachters.read("user_id", m.chat.id)
    crit = random.randint(0, 499)
    if enemy.name == "–ú–µ–¥–∏–∫" and crit == 499:
        enemy.hp = enemy.enemies[enemy.name][0] + (player[-2] - 1) * 5
        bot.send_message(m.chat.id, "–¢–∞–∫ —Ç—ã –µ—â–µ –∏ –≤—ã–ª–µ—á–∏–ª—Å—è, –≥–∞–¥–∏–Ω–∞!")
    hp = player[-4]
    chance = random.randint(1, 20)
    if chance == 1:
        bot.send_message(m.chat.id, "–≠—Ö, –ø—Ä–æ–º–∞–∑–∞–ª...) –ù—É –Ω–∏—á–µ–≥–æ, –±—É–¥–µ—Ç –∏ –Ω–∞ —Ç–≤–æ–µ–π —É–ª–∏—Ü–µ –ø—Ä–∞–∑–¥–Ω–∏–∫)")
        return True
    elif chance == 20:
        bot.send_message(m.chat.id, "–ê–π... –•–æ—Ä–æ—à–æ...! –ö–∞–∫–æ–π —É–¥–∞—Ä! –ú–æ–ª–æ–¥–µ—Ü!)")
        hp -= enemy.dmg * 1.5
    else:
        hp -= enemy.dmg
    if hp <= 0:
        die(m)
        return
    else:
        player[-4] = hp
        carachters.write(player)
        bot.send_message(m.chat.id, f"–ù–µ –ø–æ–º–µ—Ä, —Ö–æ—Ä–æ—à–æ!(–µ—â–µ {hp}hp)")
        return True


def new_plr(m: Message):
    db = carachters.read_all()
    for i in db:
        if m.chat.id == i[0]:
            return False
    return True


def reg0(m: Message):
    txt_nik = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø—É—Ç–Ω–∏–∫, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?"
    bot.send_message(m.chat.id, txt_nik)
    bot.register_next_step_handler(m, reg1)


def reg1(m: Message):
    temp[m.chat.id]["nik"] = m.text
    kb = RKM(True, True)
    for race in list(races):
        kb.add(race)
    bot.send_message(m.chat.id, f"–ù–µ–ø–ª–æ—Ö–æ–µ –∏–º—è, {m.text}. –ê –∫–∞–∫–æ–≤–∞ –±—É–¥–µ—Ç —Ç–≤–æ—è —Ä–∞—Å–∞?", reply_markup=kb)
    bot.register_next_step_handler(m, reg2)


def reg2(m: Message):
    race_choice = m.text
    hp, damage = races[race_choice]
    carachters.write([m.chat.id, temp[m.chat.id]['nik'], race_choice, hp, damage, 1, 0])
    heals.write([m.chat.id, {
        "—è–±–ª–æ–∫–æ": [0, 3],
        "–ø–∏—Ä–æ–∂–æ–∫ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π": [0, 5],
        "—Å–µ–Ω–¥–≤–∏—á —Å –∫—É—Ä–∏—Ü–µ–π": [0, 7],
        "–±—É—Ç–µ—Ä–±—Ä–æ–¥": [0, 6],
        "–≤—è–ª–µ–Ω–∞—è –≤–æ–±–ª–∞": [0, 4]}])
    time.sleep(2)
    menu(m)
    return


def reg3(m: Message):
    if m.text == "–ø–æ—Å–ø–∞—Ç—å":
        sleep(m)
    elif m.text == "–ø–æ–µ—Å—Ç—å":
        eat(m)
    elif m.text == "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞":
        workout(m)
    elif m.text == "–ø—Ä–æ–∫–∞—á–∫–∞ –ª–æ–≤–∫–æ—Å—Ç–∏":
        block(m)
    elif m.text == '–ø–æ–π—Ç–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ':
        battle(m)
    else:
        bot.send_message(m.chat.id, "–¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç")
        menu(m)
        return


def lvl_up_check(m: Message):
    player = carachters.read("user_id", m.chat.id)
    max_exp = 100 + (player[-2] - 1) * 10
    if player[-1] >= max_exp:
        player[-1] -= max_exp
        player[-2] += 1
        player[4] += 1 * player[-2]
        player[3] = races[player[2]][0] + 5 * (player[-2] - 1)
        carachters.write(player)
        bot.send_message(m.chat.id, "(—Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —ç—Ö–æ –≤ –≥–æ–ª–æ–≤–µ) –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é")
    return


def die(m: Message):
    bot.send_message(m.chat.id, "–ó–∞–º–æ—Ä–∏–ª–∏, —á–µ—Ä—Ç–∏...!"
                                "\n(—Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —ç—Ö–æ –≤ –≥–æ–ª–æ–≤–µ) C–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–∏ –Ω–∞—à–µ–π —Å–∏–º—É–ª—è—Ü–∏–∏, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ "
                                "—É–º–µ—Ä, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∏—Å—Ç–µ–º—É")
    for i in range(10, 0, -1):
        asyncio.run(asyncio.sleep(1))
        if i == 10:
            bot.send_message(m.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç—å-—á—É—Ç—å, —è –∑–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é...")
        elif i == 1:
            bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ")
        else:
            bot.send_message(m.chat.id, "...")
    heals.delete_row("user_id", m.chat.id)
    carachters.delete_row("user_id", m.chat.id)
    start(m)
    return


bot.infinity_polling()
